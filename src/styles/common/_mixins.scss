@use './palette' as c;

@mixin absCoveringParent($pos: before, $cursor: pointer) {
    position: static;
    &::#{$pos} {
        content: '';
        position: absolute;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
        cursor: #{$cursor};
    }
}

@mixin baseColors($type: 'primary', $hover: false) {
    @if ($type == 'primary') {
        background-color: c.$background-primary;
        color: c.$text-primary;

        @if ($hover) {
            transition: background-color 0.3s ease, color 0.3s ease;
            &:hover,
            &:focus {
                background-color: c.$background-secondary;
                color: c.$text-secondary;
            }
        }
    } @else {
        background-color: c.$background-secondary;
        color: c.$text-secondary;

        @if ($hover) {
            transition: background-color 0.3s ease, color 0.3s ease;
            &:hover,
            &:focus {
                background-color: c.$background-primary;
                color: c.$text-hover;
            }
        }
    }
}

@mixin customColors($bg: #fff, $text: #000, $hover: false, $activeClass: active) {
    background-color: $bg;
    color: $text;

    @if ($hover) {
        transition: background-color 0.3s ease, color 0.3s ease;
        &:hover,
        &:focus,
        &.#{$activeClass} {
            background-color: $text;
            color: $bg;
        }
    }
}

// cf _variables.scss for --pd__fact - used for media queries
@mixin padLR($padding: 1rem) {
    padding-left: calc(#{$padding} * var(--pd__fact));
    padding-right: calc(#{$padding} * var(--pd__fact));
}

@mixin padTB($padding: 1rem) {
    padding-top: calc(#{$padding} * var(--pd__fact));
    padding-bottom: calc(#{$padding} * var(--pd__fact));
}

@mixin padDual($padTB: 1rem, $padLR: 2rem) {
    @include padTB($padTB);
    @include padLR($padLR);
}

@mixin marginLR($margin: 1rem) {
    margin-left: calc(#{$margin} * var(--pd__fact));
    margin-right: calc(#{$margin} * var(--pd__fact));
}

@mixin marginTB($margin: 1rem) {
    margin-top: calc(#{$margin} * var(--pd__fact));
    margin-bottom: calc(#{$margin} * var(--pd__fact));
}

@mixin marginDual($marginTB: 1rem, $marginLR: 2rem) {
    @include marginTB($marginTB);
    @include marginLR($marginLR);
}

@mixin square($side: 1rem, $padding: null, $centeredContent: false) {
    height: $side;
    width: $side;

    @if ($padding != null) {
        padding: $padding;
    }

    @if ($centeredContent) {
        display: flex;
        justify-content: center;
        align-items: center;
    }
}

@mixin add-triangle($direction: 'top', $color: #227093, $size: 1em, $offset: 50%, $hover: false) {
  position: relative;

  // mapping in associative lists what we want (top, left..) to what it means
  // in terms of property
  $border-directions: (
    'top': border-bottom-color,
    'bottom': border-top-color,
    'left': border-right-color,
    'right': border-left-color,
  );

  $border-position: (
    'top': bottom,
    'bottom': top,
    'left': right,
    'right': left,
  );

  $border-offset: (
    'top': left,
    'bottom': left,
    'left': top,
    'right': top,
  );

  // in order for the arg $offset to be from the middle of the triangle
  $border-offset-adjust: (
    'top': translate(-50%, 0),
    'bottom': translate(-50%, 0),
    'left': translate(0, -50%),
    'right': translate(0, -50%),
  );

  &::after {
    content: '';
    position: absolute;
    height: 0;
    width: 0;
    margin: 0;
    border: solid transparent;
    #{map-get($border-offset, $direction)}: $offset;

    #{map-get($border-position, $direction)}: 100%;

    #{map-get($border-directions, $direction)}: $color;

    @if $hover {
      border-width: 0;
      transition: border-width 0.5s;
    } @else {
      border-width: $size;
    }

    transform: #{map-get($border-offset-adjust, $direction)};
  }

  @if $hover {
    &:hover::after {
      content: '';
      border-width: $size;
    }
  }
}

@mixin animateBorders(
  $style: 'draw',
  $borderWidth: 0.125em,
  $colorBG: transparent,
  $colorText: #f1f2f6,
  $colorTextHover: #ff5252,
  $ShadowBoxWidth: 0.125em
) {
  // ? parent container : isolation: isolate;

  background-color: $colorBG;
  border: 0;
  box-sizing: border-box;

  // Using inset box-shadow instead of border for sizing simplicity
  box-shadow: inset 0 0 0 $ShadowBoxWidth $colorText;
  color: $colorText;

  // Required, since we're setting absolute on pseudo-elements
  position: relative;
  text-align: center;
  vertical-align: middle;

  &::before,
  &::after {
    box-sizing: inherit;
    content: '';
    position: absolute;
    width: 100%;
    height: 100%;
  }

  &:hover,
  &:focus {
    color: $colorTextHover;
  }

  @if $style == 'draw' or $style == 'meet' {
    transition: color 0.25s;

    &::before,
    &::after {
      // Set border to invisible, so we don't see a 4px border on a 0x0 element before the transition starts
      border: $borderWidth solid transparent;
      width: 0;
      height: 0;
    }

    // This covers the top & right borders (expands right, then down)
    &::before {
      top: 0;
      left: 0;
    }

    // And this the bottom & left borders (expands left, then up)
    &::after {
      bottom: 0;
      right: 0;
    }

    // Hover styles
    &:hover::before,
    &:focus::before,
    &:hover::after,
    &:focus::after {
      width: 100%;
      height: 100%;
    }

    &:hover::before,
    &:focus::before {
      border-top-color: $colorTextHover; // Make borders visible
      border-right-color: $colorTextHover;
      transition: width 0.25s ease-out,
        // Width expands first
        height
          0.25s
          ease-out
          0.25s; // And then height
    }

    &:hover::after,
    &:focus::after {
      border-bottom-color: $colorTextHover; // Make borders visible
      border-left-color: $colorTextHover;
      transition: border-color 0s ease-out 0.5s,
        // Wait for ::before to finish before showing border
        width
          0.25s
          ease-out
          0.5s,
        // And then exanding width
        height
          0.25s
          ease-out
          0.75s; // And finally height
    }

    @if $style == 'meet' {
      // Start ::after in same position as ::before
      &::after {
        top: 0;
        left: 0;
      }

      // Change colors
      &:hover::before,
      &:focus::before {
        border-top-color: $colorTextHover;
        border-right-color: $colorTextHover;
      }

      &:hover::after,
      &:focus::after {
        border-bottom-color: $colorTextHover;
        border-left-color: $colorTextHover;
        transition: height 0.25s ease-out, width 0.25s ease-out 0.25s;
        //Animate height first, then width
      }
    }
  }

  // Border spins around element
  // ::before holds three borders that appear separately, one at a time
  // ::after holds one border that spins around to cover ::before's borders, making their appearance seem smooth

  @else if $style == 'circle' or $style == 'spinTriangle' {
    &::before,
    &::after {
      top: 0;
      left: 0;
    }

    &::before {
      border: $borderWidth solid transparent; // We're animating border-color again
    }

    &:hover::before,
    &:focus::before {
      border-top-color: $colorTextHover; // Show borders
      border-right-color: $colorTextHover;
      border-bottom-color: $colorTextHover;
      // Stagger border appearances
      /*  original :
     transition: border-top-color 0.15s linear, border-right-color 0.15s linear 0.1s,
        border-bottom-color 0.15s linear 0.2s; */
      transition: border-right-color 0s linear 0.2s, border-bottom-color 0s linear 0.4s;
    }

    &::after {
      border: 0 solid transparent;
    }

    @if $style == 'circle' {
      border-radius: 100%;
      box-shadow: none;

      transition: color 0s linear;

      &:hover {
        transition: color 0.3s linear;
      }

      &::before,
      &::after {
        border-radius: 100%;
      }

      &::after {
        border: $borderWidth solid transparent; // Shows border
      }

      &:hover::after,
      &:focus::after {
        border-top-color: $colorTextHover; // Shows border top
        border-left-color: $colorTextHover;

        transform: rotate(271deg); // Rotate around circle
        transition: transform 0.6s linear 0s, border-left-color 0s linear 0.6s;
        // Solid edge post-rotation
      }
    } @else if $style == 'spinTriangle' {
      &:hover::after,
      &:focus::after {
        border-top: $borderWidth solid $colorTextHover; // Shows border
        border-left-width: $borderWidth; // Solid edges, invisible borders
        border-right-width: $borderWidth; // Solid edges, invisible borders
        transform: rotate(270deg); // Rotate around circle
        transition: transform 0.4s linear 0s, border-left-width 0s linear 0.35s;
      }

      &:hover,
      &:focus {
        color: $colorText;
      }

      &::before {
        border: $borderWidth solid transparent;
        z-index: -1;
      }

      &::after {
        mix-blend-mode: color-dodge;
        z-index: -1;
      }

      &:hover::before,
      &:focus::before {
        background-color: $colorTextHover;
        border-top-color: $colorTextHover;
        border-right-color: $colorTextHover;
        border-bottom-color: $colorTextHover;
        transition: background-color 0s linear 0.4s, border-top-color 0.15s linear,
          border-right-color 0.15s linear 0.15s, border-bottom-color 0.15s linear 0.25s;
      }

      &:hover::after,
      &:focus::after {
        border-top: $borderWidth solid $colorTextHover;
        border-left-width: $borderWidth;
        border-right-width: $borderWidth;
      }
    }
  }
}

@mixin hover-underline-animation-shrink(
  $color: #fff,
  $bottom: -5%,
  $height: 0.2rem,
  $finalWidth: 60%,
  $className: hoverUnderlineAnimation
) {
  position: relative;
  display: block;
  color: inherit;
  text-decoration: none;
  width: auto;

  &::after {
    content: '';
    position: absolute;
    bottom: $bottom;
    left: 50%;
    transform: translateX(-50%);
    height: $height;
    width: 100%;
    background-color: transparent;
    transition: width 0.3s;
  }

  &::-moz-focus-inner {
    border: 0;
  }

  &:hover,
  &:focus,
  &:active,
  &.#{$className} {
    outline: none;

    &::after {
      width: $finalWidth;
      background-color: $color;
    }
  }
}

@mixin hover-underline-animation-ltr($color: #fff) {
  position: relative;
  display: inline-block;

  &::after {
    content: '';
    position: absolute;
    transform: scaleX(0);
    height: 2px;
    bottom: 0;
    left: 0;
    right: 0;
    background-color: $color;
    transform-origin: bottom right;

    transition: transform 0.2s ease-out;
    // transition-delay: 0.3s;
  }

  &:hover::after,
  &:focus::after,
  &.focused::after {
    transform: scaleX(1);
    transform-origin: bottom left;
    // transition-delay: 0.3s;
    transition: transform 0.6s ease-out;
  }
}

@mixin burger($base-value: 5, $bgColor: #fff, $bgFocus: #900, $radius: 1) {
  // core from https://codepen.io/designcouch/pen/Atyop
  // require 6 span tags inside the button
  display: block;
  margin: 2px;
  padding: 0;
  font-size: 3.7px * $base-value;
  width: 12px * $base-value;
  height: 10.5px * $base-value;
  position: relative;

  background-color: transparent;
  border: none;
  cursor: pointer;
  user-select: none;
  text-decoration: none;
  outline: none;

  transform: translate3d(0, 0, 0);

  &.openBurger,
  &:hover,
  &:active,
  &:focus {
    user-select: none;
    text-decoration: none;
    outline-style: none;
  }

  &:active > span,
  &.openBurger > span {
    background: $bgColor;
  }

  > span {
    display: inline-block;
    position: absolute;
    // height: 0.56em;
    height: 0.37em;
    background: $bgColor;
    opacity: 1;
    pointer-events: none;
    transform: translate3d(0, 0, 0);
    // trying to correct aliasing caused by border transition
    // transform: translateZ(-.001rem) rotate(0.01deg);
    // --- moving away from borders - styling nightmare
  }

  $border-focus: 0;

  &:focus > span,
  &:hover > span {
    background: $bgFocus;

    &:nth-of-type(n + 3):nth-of-type(-n + 4) {
      background: $bgColor;
    }
  }

  &.openBurger:focus > span,
  &.openBurger:hover > span {
    background: $bgFocus;
  }

  > span {
    width: 50%;
    transition: all 0.25s ease-in-out;
  }

  > span:nth-of-type(even) {
    left: 50%;
    border-radius: 0 (0.17em * $radius) (0.17em * $radius) 0;
  }

  > span:nth-of-type(odd) {
    left: 1px;
    border-radius: (0.17em * $radius) 0 0 (0.17em * $radius);
  }

  > span:nth-of-type(1),
  > span:nth-of-type(2) {
    top: 0;
  }

  > span:nth-of-type(3),
  > span:nth-of-type(4) {
    top: 1.12em;
  }

  > span:nth-of-type(5),
  > span:nth-of-type(6) {
    top: 2.25em;
  }

  &.openBurger > span:nth-of-type(1),
  &.openBurger > span:nth-of-type(6) {
    transform: rotate(45deg);
  }

  &.openBurger > span:nth-of-type(2),
  &.openBurger > span:nth-of-type(5) {
    transform: rotate(-45deg);
  }

  &.openBurger > span:nth-of-type(1) {
    left: 0.4em;
    top: 0.6em;
  }

  &.openBurger > span:nth-of-type(2) {
    left: calc(50% - 0.1em);
    top: 0.6em;
  }

  &.openBurger > span:nth-of-type(3) {
    left: -50%;
    opacity: 0;
  }

  &.openBurger > span:nth-of-type(4) {
    left: 100%;
    opacity: 0;
  }

  &.openBurger > span:nth-of-type(5) {
    left: 0.4em;
    top: 1.72em;
  }

  &.openBurger > span:nth-of-type(6) {
    left: calc(50% - 0.1em);
    top: 1.72em;
  }
}


